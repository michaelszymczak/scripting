#!/bin/bash

. ./table_shift.sh



##############################


test_should_prepare_mapping() {

  # given
  input="
a:b:1
a:c:2
a:b:3
b:c:4
a:c:5
d:e:6
"


  # when
  actual=$(table_shift::generate_mapping "$input" ":" "1,2")


  # then
  expected="a:b => :
a:c => ::
b:c => :::
d:e => ::::"
  assertEquals "$expected" "$actual"
}

test_should_based_mapping_on_key_collumns_only() {

  # given
  input="
1@z@a@b@1
2@z@a@c@2
5@z@a@b@3
"


  # when
  actual=$(table_shift::generate_mapping "$input" "@" "2,3,4")


  # then
  expected="z@a@b => @
z@a@c => @@"
  assertEquals "$expected" "$actual"
}



test_should_generate_header() {
  # given
  input="
0:z1:a:b:1
0:z1:a:c:2
0:z1:a:b:3
0:z1:b:c:4
0:z2:a:c:5
0:z2:d:e:6
"


  # when
  actual=$(table_shift::generate_header "$input" ":" "3,4")


  # then
  assertEquals "::::a_b:a_c:b_c:d_e" "$actual"
}


test_should_shift_collumns() {

  input="0:z1:a:b:1
0:z1:a:c:2
0:z1:a:b:3
0:z1:b:c:4
0:z2:a:c:5
0:z2:d:e:6"

  expected="0:z1:::1
0:z1::::2
0:z1:::3
0:z1:::::4
0:z2::::5
0:z2::::::6"

  actual=$(table_shift::shift_collumns "$input" ":" "3,4")

  assertEquals "$expected" "$actual"
}


test_should_generate_header_and_collumns() {

  input="foo:0:z1:X::a:b:1
bar:0:z1:X::a:c:2:5.1
baz:0:z1:X::a:b:3:7.1
Qux:0:z1:X::b:c:4:8.1
qux:0:z2:X::a:c:5:9.2
quux:0:z2:X::d:e:6:10.2"

  expected="::::z1_X__a_b:z1_X__a_c:z1_X__b_c:z2_X__a_c:z2_X__d_e
foo:0:::1
bar:0::::2:5.1
baz:0:::3:7.1
Qux:0:::::4:8.1
qux:0::::::5:9.2
quux:0:::::::6:10.2"

  actual=$(table_shift::transpose "$input" ":" "3,4,5,6,7")

  assertEquals "$expected" "$actual"

}

. shunit2

